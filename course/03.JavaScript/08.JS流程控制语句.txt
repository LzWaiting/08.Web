流程控制语句
	控制当前代码的执行顺序
	流程语句结构：
		1. 顺序结构
		2. 分支结构（选择结构）
		3. 循环结构
	1. 顺序结构
		按照代码书写顺序，从上到下执行
	2. 分支（选择）结构
		1. 作用
			根据条件选择某一段代码执行
		2. if 结构
			1. if 语句
				语法：
					if(条件){
						//待执行的语句
						//只有条件为真，才执行{}里的语句
					}
				注意：
					1. if()后面的{}可以省略，省略后，只控制该结构下的第一条语句
					2. 条件尽可能是布尔类型的
					3. 任何非0值都为真，0为假
						以下情况，条件的结构都为假：
							if(0){}
							if(0.0){}
							if(""){}
							if(NaN){}
							if(undefined){}
							if(null){}
			2. if - else 结构
				语法：
					if(条件){
						//条件为真时要执行的语句
					} else {
						//条件为假时要执行的操作
					}
			3. 多重分支结构
				if(条件1){
					//条件为真时执行
				} else if(条件2){
					//条件1为假，并且条件2为真时执行
				} else if(条件3){
					...
				} else{
					...
				}
		3. switch 语句
			在进行值判断时用的比较多
			语法：
				switch(变量){
					case 值1 : 
						代码块1;
							// 如果变量的值与case给出的值相等，就会执行：后面的代码段
						break;
							//跳出switch 语句，不再向后进行匹配，可以省略
					case 值2 :
						代码块2;
						break;
					case 值3 :
						代码块3;
						break;
					...
					default :
						代码块;
							//所有case都匹配失败之后执行的默认语句
				}
			注意：
				1. 变量与case值的匹配，是用===恒等判断的，只有数据类型和值都相等才能匹配成功
					var a = 10;
					switch(a){
						case "10":
							代码块;	// 永远无法匹配，数据类型不一致	
					}
				2. break 表示跳出switch判断，后面的判断语句不执行,省略break，当前匹配到的case后面的判断语句都会执行
				3. default 关键字用于在表达式不匹配前面给出的任何一种情形时，最终执行的操作
	3. 循环结构
		1. 作用
			重复执行某段代码
		2. 循环三要素
			循环变量
			循环条件
			循环体
		3. while 循环
			1. 语法：
				while(循环条件){
					循环体
					// 更新循环变量i ++;
				}
			2. 循环语句的执行流程
				1. 定义循环变量
				2. 判断循环变量
				3. 条件成立，执行循环体
				4. 更新循环变量
				5. 重复2-3
				6. 直到循环条件不成立，结束循环
		4. do-while 循环
			1. 语法:
				do{
					循环体
				}while(循环条件);
			2. 执行流程
				1. 定义循环变量
				2. 执行循环体
				3. 更新循环变量
				4. 判断循环条件,条件成立,重复循环,条件不成立,结束循环
			3. while 与 do-while区别
				while循环先判断循环条件,为真才执行循环体
				do-while不管循环条件是否成立,先执行一遍循环体,后再判断是否满足循环条件,继续执行循环体
		5. for 循环
			1. 语法:
				for(1. 定义循环变量;2. 判断循环条件;3. 更新循环变量){
					循环体
				}
			2. 循环流程
				1. 定义循环变量
				2. 判断循环条件
				3. 条件成立,执行循环体
				4. 更新循环变量
			3. for 循环与 while 循环的区别
				1. 相同点:执行流程相同
				2. 不同点:
					while 循环常用于不确定循环次数的场合
					for 循环常用于确定循环次数的场合
			4. 循环控制
				1. break
					用在循环体中,表示跳出循环,结束循环.
				2. continue
					用在循环体中,表示跳出本次循环,开始下一次循环
		6. 循环嵌套
			允许在一个循环中嵌套另一个循环
			语法：
				for(var i = 1; i <= 9; i++){
					for(var j = 1; j <= 9; j++){
					}
				}