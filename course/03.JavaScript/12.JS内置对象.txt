JS 内置对象
	1. String 对象
		1. 创建：
			var str1 = "hello";
			var str2 = new String("world");
		2. 属性和方法
			1. 属性：
				length：获取字符串长度
			2. 方法：
				1. 英文字符串大小写转换
					1. toUpperCase() 转换全大写字母
					2. toLowerCase() 转换全小写字母
					注意：该方法会返回新的字符串，不影响原始字符串
					常用在验证码上
					随机数：Math.random();	随机生成[0,1) 之间的任意数
				2. 获取字符或字符编码
					1. 获取指定位置的字符,返回字符
						chatAt(index);
					2. 获取指定位置的字符对应的编码，返回编码
						charCodeAt(index);
				3. 检索字符串
					1. indexOf(value[,fromIndex])
						作用：获取指定字符的下标
						参数：
							1. value：必填，设置查找字符
							2. fromIndex:可选参数，设置从那个下标位置开始查找，默认值为0
						返回值：返回value第一次出现的下标位置,如果元素不存在，返回-1
					2. lastIndexOf(value[,fromIndex])
						作用：查找指定字符的下标
						返回值：value最后一次出现的下标
					注意：大小写敏感
				4. 截取字符串
					1. substring(startIndex,endIndex)
						根据下标截取字符串[startIndex,endIndex)
						注意：startIndex与endIndex位置跌倒不影响截取结果,endIndex可以省略，省略时截取字符串到末尾
				5. 分割字符串
					1. split(param)
						参数：指定分隔符
						返回值：返回数组，存放分割完成后的小字符串
						注意：指定的分隔符必须是字符串中存在的字符，否则不会对原有字符串分割
				6. 模式匹配
					1. 配合正则表达式实现查找和替换字符串的作用
					2. 正则表达式
						语法：/正则表达式/修饰符
						修饰符：
							i :ignorecase 忽略大小写
							g :global	全局匹配
							et:
								var reg1 = /长高/ig;
								var reg2 = /\d/ig;
					3. 字符串方法：
						1. replace(substr/RegExp,newStr)
							根据给出的substr或者RegExp查找对应字符串，并将其替换为newStr
							返回值：返回替换后的新字符串，不影响原始数据
						2. match(substr/RegExp)
							根据指定的substr或者RegExp匹配对应字符串返回数组，数组中存放匹配结果
	2. 正则表达式对象 RegExp
		RegExp：Regular Expression
		1. 语法：
			var reg1 = /substr/ig;
			var reg2 = new RegExp("substr","ig");
		2. 属性：
			lastIndex : 可读可写，表示下一次匹配的起始索引
			注意：
				1. 默认情况下，正则表达式对象不能重复调用方法，如果重复调用，结果会出错，由于lastIndex保存下一次匹配的起始下标，重复调用时，不能保证每次都从下标为0开始验证，可以手动调整lastIndex为0
				2. 只有正则对象设置全局匹配g，该属性才起作用
				3. 通过手动设置lastIndex = 0;确保每次都从0开始匹配，可以重复调用
		3. 方法：
			test(str):验证字符串中是否存在满足正则匹配模式的内容，存在返回true,不存在返回false
			参数：要验证的字符串
	3. Math 对象
		1. Math 对象主要提供一系列数学运算的方法
		2. 属性：
			1. 圆周率：Math.PI
			2. 自然对数：Math.E
		3. 方法：
			1. 三角函数
				Math.sin(x)
				Math.cos(x)
				Math.tan(x)
				注意：参数为角度
				角度换算：Math.PI/180
			2. 计算函数
				Math.sqrt(x) 	表示对x开平方
				Math.log(x) 	表示求自然对数及ln(x)
				Math.pow(x,y)	表示求x的y次方
			3. 数值操作
				Math.abs(x) 		求x的绝对值
				Math.max(x1,x2,...)	求一组数据的最大值
				Math.min(x1,x2,...)	求一组数据的最小值
				最常用的操作
				Math.random() 		生成0-1之间的随机数
				Math.ceil(x) 		对x向上取整,进1
				Math.floor(x) 		表示对x向下取整，舍弃小数位，保留整数位
				Math.round(x) 		表示对x四舍五入取整数
	4. Date 日期对象
		1. 提供操作日期和时间的方法
		2. 创建Date对象
			1. var date1 = new Date();
				获取当前的日期时间
			2. 创建指定日期的对象
				var date2 = new Date("2019/5/16");
				var date3 = new Date("2019/5/16 0:30:45");
		3. 方法
			1. 读取或设置当前时间的毫秒数
				1. getTime() 
					返回当前日期时间距1970-01-01 00:00:00之间间隔的毫秒数
				2. setTime(s)
					根据指定的毫秒数s,计算日期
			2. 获取时间分量
				1. getFullYear()
					获取当前日期对象中四位的年份信息
				2. getMonth()
					获取当前日期对象中的月份信息(返回值为0-11)+1操作
				3. getDate()
					获取当前日期对象中的天数（某日）
				4. getDay()
					获取当前日期对象中的星期数(0-6),0表示周日
				5. getHours()
					获取当前日期对象中的小时数
				6. getMinutes()
					获取分钟数
				7. getSeconds()
					获取秒数
				8. getMilliseconds()
					获取毫秒数
			3. 设置日期的显示方式
				1. toString()
				2. toLocaleString()
					根据本地时间将date对象转换为字符串，返回以本地规则格式化后的日期
				3. toLocaleTimeString()
				4. toLocaleDateString()