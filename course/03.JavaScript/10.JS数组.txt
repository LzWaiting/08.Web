JS 数组
	1. Array 数组是一个有序的元素序列，数组中的元素会自动分配下标，从0开始，方便读写
	2. 创建数组
		1. 创建空数组
			var 数组名 = [];
		2. 创建数组的同时初始化元素
			var 数组名 = [元素1，元素2，...];
		3. 创建空数组
			var 数组名 = new Array();
		4. 创建数组并初始化
			var 数组名 = new Array(元素1，元素2，...);
			注意：
				var 数组名 = new Array(Num);
				只包含一个数值参数时，表示初始化数组长度，不表示一个元素
	3. 数组的使用
		1. 获取数组的长度
			属性：length
			使用：数组名.length;
		2. 访问数组元素
			数组中每一个元素都有对应的下标
			元素的下标范围 0 --> 数组名.length-1
			语法：数组名[下标];
		3. 设置数组元素（赋值）
			语法：数组名[下标] = value;
	4. 清空数组中的元素
		arr.length = 0;
	5. 循环遍历数组
		1. 正序
			for(var i = 0; i < arr.length; i++){
				arr[i];
			}
		2. 倒序
			for(var i = arr.length - 1; i >= 0; i--){
				arr[i];
			}
	6. 数组的API
		1. toString()
			作用：将数组中的元素转换为字符串返回
			返回值：字符串
		2. join()
			作用：将数组中的元素连接成一个字符串并返回
			返回值：字符串
			参数：可选，如果省略参数，默认元素之间使用“，”连接，参数指定元素之间的连接符
		3. reverse()
			作用：反转数组元素
			返回值：数组，会改变原数组的原有结构
		4. sort()
			作用：对数值中元素进行排序
			返回值：数组，会改变原数组的原有结构
			参数：可选，自定义排序函数，默认按照元素的Unicode码升序排列
			1. 升序的排列函数
				function sortAsc(a,b){
					return a-b;
				}
				arr.sort(sortAsc);
				解释：
					1. sortAsc函数接收两个参数，会自动将数组中相邻的两个元素传递给参数
					2. 如果返回值>0,交换两个元素的位置，否则不变
			2. 降序的排列函数(数字字符串)
				function sortDec(a,b){
					return b-a;
				}
				arr.sort(sortDec);
			3. 匿名函数作为排序函数，直接写在（）中
				arr.sort(function (a,b){return a-b;});
		5. 数组的进出栈操作
			栈结构：遵循先进后出原则
			栈操作可以快速操作数组中的头尾元素
			1. 对数组尾部操作	
				1. push(data)
					入栈操作，向数组的尾部添加元素，可以是一个或多个
					返回值：返回新数组的长度
				2. pop()
					出栈操作，删除数组尾部元素
					返回值：返回被删除的元素
			2. 对数值头部操作
				1. unshift(data)
					向数组头部添加一个或多个元素
					返回值：返回新数组的长度
				2. shift()
					删除数组中头部元素
					返回值：返回被删除的元素	
	7. 二维数组
		数组中每一个元素又是一个数组
		语法：
			var arr = [[10],[20],[30]];
			1. 向二维数组中添加元素
				arr[2].push()